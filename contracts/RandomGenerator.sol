// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

import { IEntropyConsumer } from "@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol";
import { IEntropy } from "@pythnetwork/entropy-sdk-solidity/IEntropy.sol";
 
// @param entropyAddress The address of the entropy contract.
contract RandomGenerator is IEntropyConsumer {

  event Requested(uint256 sequnceNumber);
  event Generated(uint256 sequnceNumber, uint256 generatedNumber);

  IEntropy public entropy;

  uint256 public sequnceNumber;
 
  constructor(address entropyAddress) {
    entropy = IEntropy(entropyAddress);
  }

  // @param userRandomNumber The random number generated by the user.
  function requestRandomNumber(bytes32 userRandomNumber) external payable {
    // Get the default provider and the fee for the request
    address entropyProvider = entropy.getDefaultProvider();
     uint128 requestFee = entropy.getFee(entropyProvider);
    // check if the user has sent enough fees
    if (msg.value < requestFee) revert("not enough fees");
 
    // pay the fees and request a random number from entropy
    uint64 _sequenceNumber = entropy.requestWithCallback{ value: requestFee }(
      entropyProvider,
      userRandomNumber
    );
    // Store the sequence number to identify the callback request
    sequnceNumber = _sequenceNumber;
    emit Requested(_sequenceNumber);
  }
 
 // Maps a random number into a range between minRange and maxRange (inclusive)
  function mapRandomNumber(
    bytes32 randomNumber,
    int256 minRange,
    int256 maxRange
  ) pure internal returns (int256) {
    uint256 range = uint256(maxRange - minRange + 1);
    return minRange + int256(uint256(randomNumber) % range);
  }
  // @param sequenceNumber The sequence number of the request.
  // @param provider The address of the provider that generated the random number. If your app uses multiple providers, you can use this argument to distinguish which one is calling the app back.
  // @param randomNumber The generated random number.
  // This method is called by the entropy contract when a random number is generated.
  function entropyCallback(
    uint64 sequenceNumber,
    address provider,
    bytes32 randomNumber
  ) internal override {
    emit Generated(sequenceNumber, uint256(randomNumber));
  }

  function getEntropy() internal view override returns (address) {
    return address(entropy);
  }
}
 